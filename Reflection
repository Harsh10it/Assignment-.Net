using System;
using System.Reflection;

public class MagicClass
{
    private int magicBaseValue;

    public MagicClass()
    {
        magicBaseValue = 9;
    }

    public int ItsMagic(int preMagic)
    {
        return preMagic * magicBaseValue;
    }
}

public class TestMethodInfo
{
    public static void Main()
    {
        // Get the constructor and create an instance of MagicClass

        Type T = Type.GetType("MagicClass");
        Console.WriteLine("Full name : {0}", T.FullName);
        Console.WriteLine("Namespace:{0}", T.Namespace);
        Console.WriteLine();
        Console.WriteLine("Methods in Customers Class");
        MethodInfo[] methods = T.GetMethods();
        foreach (MethodInfo method in methods)
        {

            Console.WriteLine(method.ReturnType.Name + " " + method.Name);
        }

            ConstructorInfo magicConstructor = T.GetConstructor(Type.EmptyTypes);
            object magicClassObject = magicConstructor.Invoke(new object[] { });

            // Get the ItsMagic method and invoke with a parameter value of 100

            MethodInfo magicMethod = T.GetMethod("ItsMagic");
            object magicValue = magicMethod.Invoke(magicClassObject, new object[] { 100 });

            Console.WriteLine("MethodInfo.Invoke() Example\n");
            Console.WriteLine("MagicClass.ItsMagic() returned: {0}", magicValue);
        
    }
}
